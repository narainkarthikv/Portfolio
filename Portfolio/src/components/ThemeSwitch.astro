---
import { Icon } from 'astro-icon/components'
---

<div class='inline-flex items-center print:hidden'>
  <div
    class='group/theme flex cursor-pointer items-center gap-2 rounded-md bg-transparent'>
    <button
      data-ccursor="lift"
      id='themeSwitch'
      class='cursor-none'
      aria-label='Toggle dark mode'>
      <i
        class='flex items-center gap-1 text-sm font-medium leading-6 text-skin-base transition-transform duration-300 ease-in-out group-hover/theme:rotate-45'>
        <Icon
          name='ri:moon-fill'
          class='hidden dark:block sm:hover:text-skin-hue'
          width={28}
          height={28}
        />
        <Icon name='ri:sun-fill' class='dark:hidden' width={28} height={28} />
      </i>
    </button>
    <select
      data-ccursor
      id='themeSelect'
      class='block w-full rounded-md border-0 bg-transparent py-1.5 pl-3 pr-10 ring-1 ring-inset ring-skin-muted focus:ring-2 focus:ring-skin-hue sm:text-sm sm:leading-6 text-skin-hue hover:cursor-none'>
      <option value='red'>Red</option>
      <option value='orange'>Orange</option>
      <option value='cyber'>Cyberpunk</option>
      <option value='green'>Green</option>
      <option value='blue'>Blue</option>
    </select>
  </div>
</div>

<style>
  :global(.dark) {
    color-scheme: dark;
  }
</style>

<script>
  let isDark = document.documentElement.classList.contains('dark')

  export function toggleDark(event: MouseEvent) {
    const isAppearanceTransition =
      'startViewTransition' in document &&
      !window.matchMedia('(prefers-reduced-motion: reduce)').matches

    if (!isAppearanceTransition) {
      isDark = !isDark
      updateTheme()
      return
    }

    const x = event.clientX
    const y = event.clientY
    const endRadius = Math.hypot(
      Math.max(x, innerWidth - x),
      Math.max(y, innerHeight - y)
    )

    // @ts-ignore
    const transition = document.startViewTransition(async () => {
      isDark = !isDark
      updateTheme()
    })

    transition.ready.then(() => {
      const clipPath = [
        `circle(0px at ${x}px ${y}px)`,
        `circle(${endRadius}px at ${x}px ${y}px)`,
      ]
      document.documentElement.animate(
        {
          clipPath: isDark ? [...clipPath].reverse() : clipPath,
        },
        {
          duration: 400,
          easing: 'ease-out',
          pseudoElement: isDark
            ? '::view-transition-old(root)'
            : '::view-transition-new(root)',
        }
      )
    })
  }

  function updateTheme() {
    document.documentElement.classList.toggle('dark', isDark)
    localStorage.setItem('theme', isDark ? 'dark' : 'light')
  }

  function updateDataTheme(value: string) {
    document.body.setAttribute('data-theme', value)
    localStorage.setItem('data-theme', value)
  }

  const themeSwitchButton = document.getElementById('themeSwitch')
  if (themeSwitchButton) {
    themeSwitchButton.addEventListener('click', toggleDark)
  }

  const themeSelect = document.getElementById(
    'themeSelect'
  ) as HTMLSelectElement

  if (themeSelect) {
    themeSelect.addEventListener('change', e => {
      const selectedTheme = (e.target as HTMLSelectElement).value
      updateDataTheme(selectedTheme)
    })
  }

  // Initialize theme based on user preference or system setting
  if (
    localStorage.theme === 'dark' ||
    (!('theme' in localStorage) &&
      window.matchMedia('(prefers-color-scheme: dark)').matches)
  ) {
    isDark = true
    updateTheme()
  }

  // Initialize data-theme based on stored value or default
  const storedDataTheme =
    localStorage.getItem('data-theme') ||
    document.body.getAttribute('data-theme')!

  updateDataTheme(storedDataTheme)

  if (themeSelect) {
    themeSelect.value = storedDataTheme
  }

  // Listen for changes in system color scheme
  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', e => {
      if (!('theme' in localStorage)) {
        isDark = e.matches
        updateTheme()
      }
    })
</script>

<style is:global>
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }
  ::view-transition-old(root) {
    z-index: 1;
  }
  ::view-transition-new(root) {
    z-index: 9999;
  }
  .dark::view-transition-old(root) {
    z-index: 9999;
  }
  .dark::view-transition-new(root) {
    z-index: 1;
  }
</style>
